# Generated by Django 2.2 on 2019-04-16 14:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='GCAAffaire',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(default='', max_length=254)),
                ('number_case', models.CharField(default='', max_length=254)),
                ('description', models.TextField(default='')),
                ('place', models.CharField(default='', help_text='Lieu', max_length=254)),
                ('nature', models.CharField(choices=[('co', 'Construction'), ('ds', 'Droit de société'), ('ta', 'Transport arérien'), ('da', "Droit d'auteur"), ('au', 'Autres')], default='', max_length=45)),
                ('comment', models.TextField(default='')),
                ('date_open', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Affaire',
                'verbose_name_plural': 'Affaires',
                'db_table': 'affaire',
            },
        ),
        migrations.CreateModel(
            name='GCAClient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(default='', max_length=254)),
                ('comment', models.TextField(default='')),
                ('adress', models.CharField(default='', max_length=254)),
                ('phone', models.CharField(default='', max_length=45)),
                ('email', models.EmailField(default='', max_length=254)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'db_table': 'client',
            },
        ),
        migrations.CreateModel(
            name='GCAContact',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=254)),
                ('first_name', models.CharField(max_length=254)),
                ('email', models.EmailField(default='', max_length=254)),
                ('adress', models.CharField(default='', max_length=254)),
                ('phone_1', models.CharField(default='', max_length=45)),
                ('phone_2', models.CharField(default='', max_length=45)),
                ('quality', models.CharField(choices=[('adv', 'Adversaire'), ('ges', 'Gestionnaire'), ('hui', 'Huissier'), ('cor', 'Correspondant')], default='', max_length=45)),
                ('title', models.CharField(choices=[('co', 'Compagnie'), ('gr', 'Groupe'), ('do', 'Docteur'), ('ma', 'Madame'), ('Mt', 'Maitre')], default='', max_length=45)),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contact',
            },
        ),
        migrations.CreateModel(
            name='GCAUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('code', models.CharField(default='', max_length=45)),
                ('job', models.CharField(choices=[('ass', 'Associé'), ('col', 'Collaborateur'), ('con', 'Consultant'), ('sec', 'Sécrétaire'), ('sta', 'Stagiaire')], max_length=45)),
                ('account', models.CharField(default='', max_length=254)),
                ('rib', models.CharField(default='', max_length=254)),
                ('daily_tax', models.FloatField(default=0, help_text='Taux journalier')),
                ('hourly_rate', models.FloatField(default=0, help_text='Taux heure')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
